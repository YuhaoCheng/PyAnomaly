import numpy as np
import os
import pickle
import torch
from collections import OrderedDict
from .gtloader import GroundTruthLoader
from scipy.ndimage import gaussian_filter1d


def load_pickle_results(loss_file, cfg):
    with open(loss_file, 'rb') as reader:
        # results {
        #   'dataset': the name of dataset
        #   'psnr': the psnr of each testing videos,
        #   'flow': [], 
        #   'names': [], 
        #   'diff_mask': [], 
        #   'score': the score of each testing videos
        #   'num_videos': the number of the videos
        # }

        # psnr_records['psnr'] is np.array, shape(#videos)
        # psnr_records[0] is np.array   ------>     01.avi
        # psnr_records[1] is np.array   ------>     02.avi
        #               ......
        # psnr_records[n] is np.array   ------>     xx.avi

        results = pickle.load(reader)

    dataset = results['dataset']
    psnr_records = results['psnr']
    score_records = results['score']
    num_videos = results['num_videos']
    # import ipdb; ipdb.set_trace()
    if cfg.DATASET.smooth.guassian:
        score_records = results['score_smooth']
        psnr_records = results['psnr_smooth']
        # new_score = []
        # for index, item in enumerate(score):
        #     temp = gaussian_filter1d(score[index], cfg.DATASET.smooth.guassian_sigma)
        #     new_score.append(temp)
        # print(f'Smooth the score with sigma:{cfg.DATASET.smooth.guassian_sigma}')
    else:
        score_records = results['score']
        psnr_records = results['psnr']
    # score = np.array(new_score)
    assert dataset == cfg.DATASET.name, f'The dataset are not match, Result:{dataset}, cfg:{cfg.DATASET.name}'

    # load ground truth
    gt_loader = GroundTruthLoader(cfg)
    # gt = gt_loader(dataset=dataset)
    gt = gt_loader()

    assert num_videos == len(gt), f'the number of saved videos does not match the ground truth, {num_videos} != {len(gt)}' 

    return dataset, psnr_records, score_records, gt, num_videos


def psnr_error(gen_frames, gt_frames, hat=False):
    """
    Computes the Peak Signal to Noise Ratio error between the generated images and the ground
    truth images.
    @param gen_frames: A tensor of shape [batch_size, height, width, 3]. The frames generated by the
                       generator model.
    @param gt_frames: A tensor of shape [batch_size, height, width, 3]. The ground-truth frames for
                      each frame in gen_frames.
    @return: A scalar tensor. The mean Peak Signal to Noise Ratio error over each frame in the
             batch.
    """
    gen_frames = gen_frames.detach().cpu()
    gt_frames = gt_frames.detach().cpu()
    batch_num = gen_frames.shape[0]
    batch_errors = 0.0
    for i in range(0, batch_num):
        num_pixels = gen_frames[i].numel()
        # max_val_hat = gen_frames[i].max()
        if hat:
            max_val = gen_frames[i].max()
        else:
            max_val = gt_frames[i].max()
        square_diff = (gt_frames[i] - gen_frames[i])**2
        log_value = torch.log10(max_val ** 2 / ((1. / num_pixels) * torch.sum(square_diff)))
        image_errors = 10 * log_value
        batch_errors += image_errors
    
    batch_errors = torch.div(batch_errors, batch_num)
    return batch_errors

def simple_diff(frame_true, frame_hat, flow_true, flow_hat, aggregation=False):
    """
    """
    assert frame_true.shape == frame_hat.shape
    assert flow_true.shape == flow_hat.shape

    frame_true = frame_true.squeeze(0).detach()
    frame_hat = frame_hat.squeeze(0).detach()
    flow_true = flow_true.squeeze(0).detach()
    flow_hat = flow_hat.squeeze(0).detach()

    loss_appe = (frame_true-frame_hat)**2
    loss_flow = (flow_true-flow_hat)**2

    if aggregation:
        loss_appe = torch.mean(loss_appe)
        loss_flow = torch.mean(loss_flow)

    return loss_appe, loss_flow

def find_max_patch(diff_map_appe, diff_map_flow, kernel_size=16, stride=4, aggregation=True):
    '''
    kernel size = window size
    '''
    # max_pool = torch.nn.MaxPool2d(kernel_size=kernel_size, stride=stride)
    avg_pool = torch.nn.AvgPool2d(kernel_size=kernel_size, stride=stride)
    max_patch_appe = avg_pool(diff_map_appe)
    max_patch_flow = avg_pool(diff_map_flow)
    # import ipdb; ipdb.set_trace()
    assert len(max_patch_appe.shape) == 3, f'the shape of max_patch_appe is {max_patch_appe.shape}'
    assert len(max_patch_flow.shape) == 3, f'the shape of max_patch_flow is {max_patch_flow.shape}'

    if aggregation:
        # Will sum the channel dim
        max_patch_appe = torch.mean(max_patch_appe, dim=0) 
        max_patch_flow = torch.mean(max_patch_flow, dim=0)

    max_appe_value = torch.max(max_patch_appe)
    max_flow_value = torch.max(max_patch_flow)
    
    # max_val_flow_std = 0.0
    # max_val_appe_std = 0.0
    # pos_flow_std = [0, 0]
    # pos_appe_std = [0, 0]

    # for i in range(0, diff_map_flow.shape[0]-kernel_size, stride):
    #     for j in range(0, diff_map_flow.shape[1]-kernel_size, stride):
    #         curr_std_flow = torch.std(diff_map_flow[i:i+kernel_size, j:j+kernel_size])
    #         # curr_mean = np.mean(diff_map_flow[i:i+kernel_size, j:j+kernel_size])
    #         # curr_std_appe = torch.std(diff_map_appe[i:i+kernel_size, j:j+kernel_size])
    #         # curr_mean_appe = np.mean(diff_map_appe[i:i+kernel_size, j:j+kernel_size])
    #         # if curr_mean > max_val_mean:
    #         #     max_val_mean = curr_mean
    #         #     std_1 = curr_std
    #         #     pos_1 = [i, j]
    #         #     std_appe_1 = curr_std_appe
    #         #     mean_appe_1 = curr_mean_appe
    #         if curr_std_flow > max_val_flow_std:
    #             max_val_flow_std = curr_std_flow
    #             # mean_2 = curr_mean
    #             pos_flow_std = [i, j]
    #             # std_appe_2 = curr_std_appe
    #             # mean_appe_2 = curr_mean_appe
    
    # for i in range(0, diff_map_appe.shape[0]-kernel_size, stride):
    #     for j in range(0, diff_map_appe.shape[1]-kernel_size, stride):
    #         # curr_std_flow = torch.std(diff_map_flow[i:i+kernel_size, j:j+kernel_size])
    #         # curr_mean = np.mean(diff_map_flow[i:i+kernel_size, j:j+kernel_size])
    #         curr_std_appe = torch.std(diff_map_appe[i:i+kernel_size, j:j+kernel_size])
    #         # curr_mean_appe = np.mean(diff_map_appe[i:i+kernel_size, j:j+kernel_size])
    #         # if curr_mean > max_val_mean:
    #         #     max_val_mean = curr_mean
    #         #     std_1 = curr_std
    #         #     pos_1 = [i, j]
    #         #     std_appe_1 = curr_std_appe
    #         #     mean_appe_1 = curr_mean_appe
    #         if curr_std_appe > max_val_appe_std:
    #             max_val_appe_std = curr_std_appe
    #             # mean_2 = curr_mean
    #             pos_appe_std = [i, j]
    #             # std_appe_2 = curr_std_appe
    #             # mean_appe_2 = curr_mean_appe
    
    app_h, app_w =  torch.where(torch.eq(max_patch_appe, max_appe_value))
    flow_h, flow_w =  torch.where(torch.eq(max_patch_flow, max_flow_value))
    
    max_appe_final = max_appe_value
    max_flow_final = max_flow_value
    # max_appe_final = torch.div(max_appe_value, kernel_size**2)
    # max_flow_final = torch.div(max_flow_value, kernel_size**2) 
    # import ipdb; ipdb.set_trace()
    # return max_patch_appe, max_patch_flow
    return max_appe_final, max_flow_final, (app_h, app_w), (flow_h, flow_w)
    # return max_val_appe_std, max_val_flow_std, (app_h, app_w), (flow_h, flow_w)

def calc_w(w_dict):
    wf = 0.0
    wi = 0.0
    n = 0
    for key in w_dict.keys():
        # n += w_dict[key][0]
        n += 1
        wf += w_dict[key][1]
        wi += w_dict[key][2]
    # import ipdb; ipdb.set_trace()
    wf = torch.div(1.0, torch.div(wf, n))
    wi = torch.div(1.0, torch.div(wi, n))

    return wf, wi

def amc_normal_score(wf, sf, wi, si, lambada_s=0.2):
    final_score = torch.log(wf * sf) + lambada_s * torch.log(wi*si)

    return final_score

def amc_score(frame, frame_hat, flow, flow_hat, wf, wi, kernel_size=16, stride=4, lambada_s=0.2):
    '''
    wf, wi is different from videos
    '''
    loss_appe, loss_flow = simple_diff(frame, frame_hat, flow, flow_hat)
    max_patch_appe, max_patch_flow, app_cord, flow_crod = find_max_patch(loss_appe, loss_flow, kernel_size=kernel_size, stride=stride)
    final_score = amc_normal_score(wf, max_patch_appe, wi, max_patch_flow, lambada_s=lambada_s)

    return final_score, app_cord, flow_crod

def oc_score(raw_data):
    object_score = np.empty(shape=(raw_data.shape[0],),dtype=np.float32)
    for index, dummy_objects in enumerate(raw_data):
        # temp = np.max(-dummy_objects)
        temp = np.max(dummy_objects)
        object_score[index] = temp
    
    frame_score = np.max(object_score)

    return frame_score


def reconstruction_loss(x_hat, x):
    '''
    The input is the video clip, and we use the RL as the score.
    RL := Reconstruction Loss
    '''
    x_hat = x_hat.squeeze(0).detach()
    x = x.squeeze(0).detach()
    rl = torch.sqrt(torch.pow((x_hat - x), 2))
    h_dim = len(rl.shape) - 2
    w_dim = len(rl.shape) - 1
    rl = torch.mean(rl, (h_dim, w_dim))
    return rl